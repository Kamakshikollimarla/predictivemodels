# -*- coding: utf-8 -*-
"""quiz1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QpZ3CO3nTZKsPqSMjFQLVcSwANCKnVl5
"""

import pandas as pd
import numpy as np

data = pd.read_csv("/content/DSAI-LVA-DATASET for Quiz.csv")
data.isnull().sum()
data.duplicated().sum()
data.drop_duplicates()

data.head()

res = []
for i in data['PreviousTestScore']:
  if i in range(90,101):
    res.append("High Grade")
  elif i in range(85,90):
    res.append("Low Grade")
  else:
    res.append("Fail")
data['Target'] = res

data["ParentEducation"]

PE = ["Masters","Bachelor's","Highschool","school","Not educated"]

temp = np.random.choice( ["Masters","Bachelor's","Highschool","Not educated"],size=200)
data["ParentEducation"] = temp

from sklearn.preprocessing import LabelEncoder,OneHotEncoder
O = OneHotEncoder()
ec = ["ParentEducation"]
O.fit_transform(data[ec])
data = pd.get_dummies(data,columns=["ParentEducation"])
LE = LabelEncoder()
data["Target"] = LE.fit_transform(data["Target"])

import seaborn as sns

sns.heatmap(data.corr())



from sklearn.model_selection import train_test_split

Train, Test = train_test_split(data,test_size=0.3,random_state = 42)
Train.reset_index(drop=True,inplace=True)
Test.reset_index(drop=True,inplace=True)
Train.to_csv("Train_Data.csv",",")
Test.to_csv("Test_Data.csv",",")



X = Train.drop("Target",axis="columns")
X = X.drop("Pass",axis="columns")
y = Train["Target"]

sns.boxplot(X)

print(y)

# from sklearn.preprocessing import StandardScaler

# S = StandardScaler()
# X = S.fit_transform(X)

X_test  = Test.drop(["Target","Pass"],axis="columns")

y_test = Test["Target"]

data.to_csv("new_data.csv",",")

k = 2
size = 50
DF = pd.read_csv("/content/new_data.csv")
for i in range(k):
  df = DF[size*i:size*(i+1)]
  df.to_csv(f'data_{i+1}.csv', index=False)

from sklearn.tree import DecisionTreeClassifier

clf = DecisionTreeClassifier()
model = clf.fit(X,y)
preds = clf.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test,preds))
print(classification_report(y_test,preds))
print(confusion_matrix(y_test,preds))



from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier()
model = clf.fit(X,y)
preds = clf.predict(X_test)

print(accuracy_score(preds,y_test))
print(classification_report(y_test,preds))
print(confusion_matrix(y_test,preds))

from xgboost import XGBClassifier

clf = XGBClassifier()
model = clf.fit(X,y)
preds = clf.predict(X_test)

print(accuracy_score(preds,y_test))
print(classification_report(y_test,preds))
print(confusion_matrix(y_test,preds))

from sklearn.svm import SVC

clf = SVC()
model = clf.fit(X,y)
preds = clf.predict(X_test)

print(accuracy_score(preds,y_test))
print(classification_report(y_test,preds))
print(confusion_matrix(y_test,preds))